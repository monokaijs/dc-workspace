name: Build and Release (Simple)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win
            build_command: "npm run build && electron-builder --win"
          - os: macos-latest
            platform: mac
            build_command: "npm run build && electron-builder --mac"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate version
        id: version
        shell: bash
        run: |
          # Get base version from package.json
          BASE_VERSION=$(node -p "require('./package.json').version")

          # Generate timestamp
          TIMESTAMP=$(date +%s)

          # Split base version and replace last digit with timestamp
          IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}

          # Create new version with timestamp as patch version
          BUILD_VERSION="$MAJOR.$MINOR.$TIMESTAMP"

          echo "Base version: $BASE_VERSION"
          echo "Timestamp: $TIMESTAMP"
          echo "Generated version: $BUILD_VERSION"
          echo "version=$BUILD_VERSION" >> $GITHUB_OUTPUT

          # Update package.json with new version
          npm version $BUILD_VERSION --no-git-tag-version

      - name: Build application
        run: ${{ matrix.build_command }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build-${{ steps.version.outputs.version }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
          retention-days: 30

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        shell: bash
        run: |
          # Get base version from package.json
          BASE_VERSION=$(node -p "require('./package.json').version")

          # Generate timestamp
          TIMESTAMP=$(date +%s)

          # Split base version and replace last digit with timestamp
          IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}

          # Create new version with timestamp as patch version
          BUILD_VERSION="$MAJOR.$MINOR.$TIMESTAMP"

          echo "Base version: $BASE_VERSION"
          echo "Timestamp: $TIMESTAMP"
          echo "Generated version: $BUILD_VERSION"
          echo "version=$BUILD_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$BUILD_VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display artifact structure
        shell: bash
        run: find ./artifacts -type f -name "*" | head -20

      - name: Create Release
        shell: bash
        run: |
          # Create release notes
          cat > release_notes.md << 'EOF'
          ## Browser ${{ steps.version.outputs.version }}
          
          ### 🚀 Features
          - Multi-tab browsing with persistent state
          - Custom apps management  
          - History tracking and search
          - Settings page for customization
          - Keyboard shortcuts (Ctrl+T, Ctrl+W, Ctrl+1-9)
          
          ### 📦 Downloads
          Download the appropriate installer for your operating system below.
          
          ### 🔧 Installation
          1. Download the appropriate file for your operating system
          2. Run the installer
          3. Launch the Browser application
          
          ### 📝 Changelog
          - Automatic build from commit: ${{ github.sha }}
          - Build date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Build number: ${{ github.run_number }}
          EOF
          
          # Create the release
          gh release create ${{ steps.version.outputs.tag }} \
            --title "Browser ${{ steps.version.outputs.version }}" \
            --notes-file release_notes.md \
            --latest
          
          # Upload all build artifacts
          find ./artifacts -name "*.exe" -o -name "*.dmg" -o -name "*.yml" -o -name "*.blockmap" | while read file; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              gh release upload ${{ steps.version.outputs.tag }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
